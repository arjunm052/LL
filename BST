//Binary Search Tree Implementation

#include<stdio.h>
#include<stdlib.h>

//Definition of Node for Binary search tree
struct bstnode{
	int data;
	struct bstnode* left;
	struct bstnode* right;
};

//Function to create a new node in heap
struct bstnode* getnewnode(int data)
{
	struct bstnode* newnode=(struct bstnode*)malloc(sizeof(struct bstnode));
	newnode->data=data;
	newnode->left = newnode->right = NULL;
	return newnode;
}

//To insert data in BST and return the address of root

struct bstnode* insert(struct bstnode* root,int data)
{
	if(root == NULL) //Empty Tree
	{
	root = getnewnode(data);
	}
	//If data to be inserted is lesser, insert in left sub tree
	else if(data <= root->data)
	{
		root->left = insert(root->left,data);
	}
	else
	{
		root->right = insert(root->right,data);
	}
	
	return root;
}

int search(struct bstnode* root, int data)
{
	if(root == NULL) 
	{
		return 0;
	}
	else if(root->data == data) 
	{
		return 1;
	}
	else if(data <= root->data) 
	{
		return search(root->left,data);
	}
	else
	 {
		return search(root->right,data);
	 }
}

//Function to find minimum in a tree. 
struct bstnode* FindMin(struct bstnode* root)
{
	while(root->left != NULL) root = root->left;
	return root;
}

//Function to search and delete a value from BST
struct bstnode* delete(struct bstnode* root, int data)
{
		if(root == NULL) return root;
		else if(data < root->data) root->left = delete(root->left,data);
		else if(data > root->data) root->right = delete(root->right,data);
		//Wohooo I finally found you
		else
		{
			//Case 1 : No Child
			if(root->left == NULL && root->right == NULL)
			{
			free(root);
			root = NULL;
		    }
		    
			//Case 2 : One Child
			else if(root->left == NULL)
			{
				struct bstnode* temp = root;
				root = root->right;
				free(temp);
			}
			
			else if(root->right == NULL)
			{
				struct bstnode* temp = root;
				root = root->left;
				free(temp);
			}
			
			//Case 3 : Two Children
			else
			{
				struct bstnode* temp = FindMin(root->right);
				root->data=temp->data;
				root->right=delete(root->right,temp->data);
			}
		}
}

void printPostorder(struct bstnode* node) 
{ 
     if (node == NULL) 
        return; 
  
     // first recur on left subtree 
     printPostorder(node->left); 
  
     // then recur on right subtree 
     printPostorder(node->right); 
  
     // now deal with the node 
     printf("%d ", node->data); 
} 

void printInorder(struct bstnode* node)
{
	if(node == NULL)
	return;
	
	//recurse left node
	printInorder(node->left);
	//print the node
	printf(" %d ",node->data);
	//recurse right node
	printInorder(node->right);
	
}

void printPreorder(struct bstnode* node)
{
	if(node == NULL)
	return;
	
	//print the node
	printf(" %d ",node->data);
	//recurse the left node
	printPreorder(node->left);
	//recurse the right node
	printPreorder(node->right);
}

int maxDepth(struct bstnode* node)  
{ 
   if (node==NULL)  
       return 0; 
   else 
   { 
       /* compute the depth of each subtree */
       int lDepth = maxDepth(node->left); 
       int rDepth = maxDepth(node->right); 
  
       /* use the larger one */
       if (lDepth > rDepth)  
           return(lDepth+1); 
       else return(rDepth+1); 
   } 
}  

//Count total no. of nodes in the tree
int count(struct bstnode* root)
{
	if(root==NULL)
	return 0;
	else
	return (count(root->left)+count(root->right)+1);
}

int main()
{
	struct bstnode* root = NULL; //Create an empty tree
	root = insert(root,15);	
	root = insert(root,10);	
	root = insert(root,20);
	root = insert(root,8);
	root = insert(root,12);
	
	int number;
	printf("Enter number to be searched\n");
	scanf("%d",&number);
	//If number is found, print "FOUND"
	if(search(root,number)) printf("Found\n");
	else printf("\nNot Found\n");
	printf("\n PostOrder Traversal: ");
	printPostorder(root);
	printf("\n");
	printf("\n InOrder Traversal: ");
	printInorder(root);
	printf("\n");
	printf("\n PreOrder Traversal: ");
	printPreorder(root);
	printf("\n\n Height of tree is %d", maxDepth(root)); 
	printf("\n\n Total no. of nodes in the tree is %d", count(root));
	return 0;
	
}

